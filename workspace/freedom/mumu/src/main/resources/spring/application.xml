<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!--配置Spring自动扫描包 -->
	 <context:component-scan base-package="com.mumu.*">
		<!-- 排除那些注解不扫描 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
<!--
	加入外部资源文件：db.properties
	<context:property-placeholder location="classpath:spring/db.properties" />
	加入c3p0数据源
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>

		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>

	加入JPA的产品适配器
	<bean id="jpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="true"></property>
		自动的获取数据库方言，使用静态方法
		<property name="databasePlatform">
			<bean class="com.mumu.factory.Hibernates" factory-method="getDialect">
				<constructor-arg ref="dataSource"></constructor-arg>
			</bean>
		</property>
	</bean>

	加入如果是HIBERNATE那么就加入SessionFactory,JPA则是加入是 entityManagerFactory

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">

		接管数据数据连接
		<property name="dataSource" ref="dataSource"></property>

		配置JPA的适配器
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter"></property>

		配置自动扫描的beans包
		<property name="packagesToScan" value="com.mumu.entity.*"></property>

		JPA自身的一些属性的配置,即是配置HIBERNATE的一些属性
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				配置数据库方言
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				配置的二级缓存
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
				配置二级缓存的配置文件位置
				<prop key="net.sf.ehcache.configurationResourceName">ehcache-hibernate.xml</prop>
				配置查询缓存
				<prop key="hibernate.cache.use_query_cache">true</prop>

				配置生成数据列的命名策略. 将自动的把 Java 变量的命名方式转为数据库列的命名方式. 例如 lastName 转为 LAST_NAME
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
			</props>
		</property>
	</bean>

	配置JPA事务
	<bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		让事务来管理entityManagerFactory
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>

	配置使用spring的注解 事务
	<tx:annotation-driven transaction-manager="jpaTransactionManager" />

	配置springDATA使用,配置SpringData扫描包 ,需要JPA的事务，entityManagerFactory
	<jpa:repositories base-package="com.mumu.repository.*"
		transaction-manager-ref="jpaTransactionManager"
		entity-manager-factory-ref="entityManagerFactory">
	</jpa:repositories> -->
</beans>
